import { Types } from './types';
import { AnyAction } from 'redux';
import { IStateToProps, ITryLoginSuccess, ISignUpSuccess } from '../interfaces';
import { IGenericErrorAction } from '@interfaces/action';

const initialState: IStateToProps = {
  userData: null,

  loginLoading: false,
  loginSuccess: null,
  loginFailure: null,

  singUpLoading: false,
  singUpSuccess: null,
  singUpFailure: null,
};

export default function auth(state: IStateToProps = initialState, action: AnyAction) {
  switch (action.type) {
    case Types.AUTH_TRY_LOGIN_REQUEST:
      return {
        ...state,
        userData: null,
        loginLoading: true,
        loginSuccess: null,
        loginFailure: null,
      };
    case Types.AUTH_TRY_LOGIN_SUCCESS:
      return {
        ...state,
        userData: (action as ITryLoginSuccess).payload.userData,
        loginLoading: false,
        loginSuccess: true,
        loginFailure: false,
      };
    case Types.AUTH_TRY_LOGIN_FAILURE:
      return {
        ...state,
        userData: null,
        loginLoading: false,
        loginSuccess: false,
        loginFailure: (action as IGenericErrorAction).payload.message,
      };
    case Types.AUTH_SIGN_UP_REQUEST:
      return {
        ...state,
        singUpLoading: true,
        singUpSuccess: null,
        singUpFailure: null,
      }
    case Types.AUTH_SIGN_UP_SUCCESS:
      return {
        ...state,
        userData: (action as ISignUpSuccess).payload.userData,
        singUpLoading: false,
        singUpSuccess: true,
        singUpFailure: false,
      }
    case Types.AUTH_SIGN_UP_FAILURE:
      return {
        ...state,
        singUpLoading: false,
        singUpSuccess: false,
        singUpFailure: (action as IGenericErrorAction).payload.message,
      };
    default:
      return state;
  }
}
